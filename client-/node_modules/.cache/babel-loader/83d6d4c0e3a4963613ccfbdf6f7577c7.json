{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michal\\\\Documents\\\\GitHub\\\\qa_awp\\\\client-\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport Questions from \"./Questions\";\nimport Question from \"./Question\";\nimport NewQuestion from \"./NewQuestion\";\nimport './App.css';\nimport { Link, Router } from \"@reach/router\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.API_URL = process.env.REACT_APP_API_URL;\n    this.state = {\n      questions: []\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async getData() {\n    const url = \"${this.API_URL}/questions/\";\n    const response = await fetch(url);\n    const data = await response.json();\n    return this.setState({\n      questions: data\n    });\n  }\n\n  async postData() {\n    const url = \"${this.API_URL}/questions/\";\n    const response = await fetch(url);\n    const data = await response.json();\n  }\n\n  async NewQuestion(ques) {\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ques: ques,\n        answ: []\n      })\n    };\n    const response = await fetch('${this.API_URL}/questions/', request);\n    const data = await response.json();\n    this.getData();\n    console.log(data);\n  }\n\n  async postAnswer(id, text) {\n    console.log(\"postAnswer\", id, text);\n    const url = `${this.API_URL}/questions/${id}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: text,\n        vote: 2\n      })\n    });\n    const data = await response.json();\n    this.getData();\n    console.log(\"Printing the response:\", data);\n  }\n  /*\r\n  async editVote(id, vote) {\r\n      console.log(\"postAnswer\", id, vote);\r\n      const url = `http://localhost:8080/api/questions/${id}`;\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({text: text, vote : 2})\r\n      });\r\n      const data = await response.json();\r\n      this.getData();\r\n      console.log(\"Printing the response:\", data);\r\n  }\r\n  */\n\n\n  getQuestion(id) {\n    //  const findFunction = question => question.id === parseInt(id);\n    // return this.state.questions.find(findFunction);\n    return this.state.questions.find(k => k._id === id);\n  }\n\n  render() {\n    const container = {\n      color: \"white\",\n      backgroundColor: \"#7FDBFF\",\n      padding: \"20px 20px\",\n      fontFamily: \"Arial\"\n    };\n    const bold = {\n      fontWeight: \"bold\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NewQuestion, {\n      path: \"/new\",\n      NewQuestion: ques => this.NewQuestion(ques),\n      data: this.state.questions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(Questions, {\n      path: \"/\",\n      data: this.state.questions,\n      changeDone: index => this.changeDone(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Question, {\n      path: \"/question/:id\",\n      data: this.state.questions,\n      postAnswer: (id, text) => this.postAnswer(id, text),\n      getQuestion: id => this.getQuestion(id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      style: bold,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }\n    }, \"(Trivia) Amount of Questions so far \", this.state.questions.length, \".\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Michal/Documents/GitHub/qa_awp/client-/src/App.js"],"names":["React","Component","Questions","Question","NewQuestion","Link","Router","App","constructor","props","API_URL","process","env","REACT_APP_API_URL","state","questions","componentDidMount","getData","url","response","fetch","data","json","setState","postData","ques","request","method","headers","body","JSON","stringify","answ","console","log","postAnswer","id","text","vote","getQuestion","find","k","_id","render","container","color","backgroundColor","padding","fontFamily","bold","fontWeight","index","changeDone","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport Questions from \"./Questions\";\r\nimport Question from \"./Question\";\r\nimport NewQuestion from \"./NewQuestion\";\r\nimport './App.css';\r\nimport { Link, Router } from \"@reach/router\"\r\n\r\nclass App extends Component {\r\n\r\n    API_URL = process.env.REACT_APP_API_URL;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.getData();\r\n  }\r\n\r\n async getData() {\r\n    const url = \"${this.API_URL}/questions/\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      return this.setState({ questions:data} )\r\n  }\r\n\r\n  async postData() {\r\n      const url = \"${this.API_URL}/questions/\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n  }\r\n\r\n   async NewQuestion(ques) {\r\n       const request = {\r\n           method: 'POST',\r\n           headers: {'Content-Type': 'application/json'},\r\n           body: JSON.stringify({ques: ques , answ:[]})\r\n       };\r\n       const response = await fetch('${this.API_URL}/questions/', request);\r\n       const data = await response.json();\r\n       this.getData();\r\n       console.log(data);\r\n   }\r\n\r\n    async postAnswer(id, text) {\r\n        console.log(\"postAnswer\", id, text);\r\n        const url = `${this.API_URL}/questions/${id}`;\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({text: text, vote : 2})\r\n        });\r\n        const data = await response.json();\r\n        this.getData();\r\n        console.log(\"Printing the response:\", data);\r\n    }\r\n\r\n    /*\r\n    async editVote(id, vote) {\r\n        console.log(\"postAnswer\", id, vote);\r\n        const url = `http://localhost:8080/api/questions/${id}`;\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({text: text, vote : 2})\r\n        });\r\n        const data = await response.json();\r\n        this.getData();\r\n        console.log(\"Printing the response:\", data);\r\n    }\r\n    */\r\n\r\n    getQuestion(id) {\r\n        //  const findFunction = question => question.id === parseInt(id);\r\n        // return this.state.questions.find(findFunction);\r\n        return this.state.questions.find(k => k._id === id);\r\n    }\r\n\r\n    render() {\r\n        const container = {\r\n            color: \"white\",\r\n            backgroundColor: \"#7FDBFF\",\r\n            padding: \"20px 20px\",\r\n            fontFamily: \"Arial\"\r\n        };\r\n        const bold = {\r\n            fontWeight:\"bold\"\r\n        };\r\n        return (\r\n         <>\r\n             <div style={container}>\r\n              <Router>\r\n                 <NewQuestion path=\"/new\" NewQuestion={(ques) => this.NewQuestion(ques)} data={this.state.questions}  />\r\n                  <Questions path=\"/\" data={this.state.questions} changeDone={index => this.changeDone(index)}></Questions>\r\n                  <Question path=\"/question/:id\" data={this.state.questions} postAnswer={(id, text) => this.postAnswer(id, text)} getQuestion={id =>this.getQuestion(id)}></Question>\r\n             </Router>\r\n             <p style={bold}>(Trivia) Amount of Questions so far {this.state.questions.length}.</p>\r\n             </div>\r\n         </>\r\n                );\r\n            }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}